== BTL_REL.BIN ==
0x00057BD0    partnerAiTick()

0x00059078    resetFlatten(combatId = r4)

0x0005AF44    increaseSpeedBuffer(combatData = r4, statsData = r5)
0x0005AFD8    handleDeath(entityPtr = r4, combatPtr = r5, combatId = r6)
0x0005B070    hasAffordableMoves(arrayPtr = r4, combatId = r5) -> numAffordableMoves = r2

0x0005B1AC    deferred call -> getEntityTileFromModel(0x12F348, 0x134D58, 0x134D57)
0x0005B1C0    0x0005B1C0()

0x0005BBE4    getChanceToHit(attackerPtr = r4, victimPtr = r5, victimCombatPtr = r6, moveId = r7) -> chanceToHit = r2

0x0005D374    getMPCost(entityPtr = r4, combatPtr = r5, moveSlot = r6) -> mpCost = r2 // 0 if invalid
0x0005D608    distanceSquared(entityPtr1 = r4, entityPtr2 = r5) -> distance = r2
0x0005D658    setMoveAnim(entityPtr = r4, combatPtr = r5, unused = r6, attackId = r7)  
0x0005D6E0    setChargeupFlag(entityPtr = r4, combatPtr = r5, techId = r6)

0x0005D990    0x0005D990(entityData = r4, combatData = r5) -> result = r2

0x0005DFC8    addFinisherValue(combatData = r4, amount = r5) // addToFinisher

0x0005E520    removeEffectSprite(entityPtr = r4, combatPtr = r5, effectType = r6)

0x0005EB0C    resetDumbCooldownTimers(combatData = r4)

0x0005EC7C    removeEffectSprites(entityPtr = r4, combatPtr = r5)

0x0005EE58    hasAffordableMoves(arrayPtr = r4, combatId = r5) -> numAffordableMoves = r2
0x0005EF3C    setCooldown(entityPtr = r4, combatPtr = r5)
0x0005EF58    selectRandomMove(arrayPtr = r4) -> randomMove = r2
0x0005EFCC    getStrongestMove(combatId = r4, moveArray = r5) -> strongestMove = r2
0x0005F0C0    getBestTypeMove(combatId = r4, moveArray = r5) -> bestTypeMove = r2

0x0005F244    getCheapestMove(combatId = r4, moveArray = r5) -> cheapestMove = r2
0x0005F344    getStrongestMoveArray(powerArray = r4, moveArray = r5, retPtr = r6, numMoves = r7)
0x0005F404    getCheapestMoveArray(costArray = r4, moveArray = r5, retPtr = r6, numMoves = r7)
0x0005F4C4    getNPCId(entityPtr = r4) -> npcId = r2
0x0005F51C    getStatusedEnemies(entityPtr = r4) -> store(r5, enemyArray), store(r6, enemyCount)
0x0005F61C    getWeakestEnemy(entityPtr = r4, combatPtr = r5) -> store(r5, lastScore), store(r6, bestEntity)
0x0005F764    getWeaknessScore(entityPtr = r4, enemyPtr = r5) -> weaknessScore = r2
0x0005F8E0    sortMoveArrayDescending(powerArray = r4, moveSlotArray = r5, rankingArray = r6, numMoves = r7)
0x0005F9D8    sortMoveArrayAscending(powerArray = r4, moveSlotArray = r5, rankingArray = r6, numMoves = r7)
0x0005FAD0    getTypeFactorPriority(attackerSpec, victimSpec) -> prioValue = r2
0x0005FB54    getNumAliveNPCs() -> numEnemies = r2
0x0005FBB4    fillRankingArray(powerArray = r4, rankingArray = r5, numMoves = r6)
0x0005FC18    handleConfusion(entityPtr = r4, combatPtr = r5, combatId = r6)
0x0005FCE8    getRemainingEnemies(entityPtr = r4) -> store(r5, enemyArray), store(r6, enemyCount)

0x0005FDB4    getMoveCommandAttack(combatId = r4, moveArray = r5) -> moveId = r2
0x0005FE2C    getMoveCommandModerate(combatId = r4, moveArray = r5) -> moveId = r2

0x0005FEA4    aiPickTarget(entityPtr, combatPtr, currentTarget, value)

0x000601AC    hasZeroHP(combatId = r4)
0x00060218    getClosestEnemy(entityPtr = r4, hostileMap = r5) -> closestEntity = r2

0x00060618    partnerYourCallSelectMove(entityPtr = r4, combatPtr = r5, combatId = r6)

0x0006142C    setCommandBar()

0x000623A0    0x000623A0()

0x000630F8    0x000630F8()

0x00063EF0    deferred -> r2 = load(0x1350C0)

0x00064550    0x00064550()

0x0006F168    removePoisonSprite(instanceId = r4, entityPtr = r5)

0x0006F4DC    removeConfusionSprite(instanceId = r4, entityPtr = r5)

0x0006FEE0    removeStunSprite(instanceId = r4, entityPtr = r5)

== KAR_REL.BIN ==
0x00053878    curlingInit(isTutorial = r4)

== TRN_REL.BIN ==
0x0008A744    handleBrainMoveLearnChance(digimonType = r4) -> success = r2

0x0008E824    doSlotsRigging(reelId = r4, dataOffset = r5)

== SLUS ==
0x000909E8    ChangeClearPad(val = r4)

0x00090A18    ChangeClearRCnt(irq = r4, flag = r5)

0x00091174    exit(exitcode = r4)
0x00091184    std_out_puts(stringPtr = r4)
0x0009119C    abs(val = r4) -> result = r2
0x000911AC    SaveState(buf = r4) -> result = r2
0x000911BC    RestoreState(buf = r4, param = r5) -> result = r2
0x000911CC    strcat(dst = r4, src = r5) -> dst = r2
0x000911DC    strcmp(str1 = r4, str2 = r5) -> result = r2
0x000911EC    strncmp(str1 = r4, str2 = r5, maxlen = r6) -> result = r2
0x000911FC    strcpy(dst = r4, src = r5) -> dst = r2
0x0009120C    strncpy(dst = r4, src = r5, maxlen = r6) -> dst = r2
0x0009121C    strlen(src = r4) -> length = r2
0x0009122C    strrchr(src = r4, char = r5) -> address = r2
0x0009123C    bzero(dst = r4, len = r5) -> dst = r2 // zeroes memory
0x0009124C    memcpy(dest = r4, src = r5, length = r6)
0x0009125C    memset(dest = r4, fillbyte = r5, length = r6)
0x0009126C    memchr(src = r4, scanbyte = r5, len = r6) -> address = r2
0x0009127C    rand() -> value = r2 // BIOS call
0x0009128C    printf(txtPtr = r4, params = r5,r6,r7,stack)

0x00091C10    vsyncWait(targetFrame = r4, timeout = r5)
0x00091CA8    vsync(frameCount = r4) -> blankCount = r4 //either hblank or vblank

0x000923AC    proxySetDMAIRQHandler(stringPtr = r4, arrayPtr = r5) -> oldHandler = r2

0x00092450    setIRQMask(newIRQMask = r4) -> oldIRQMask = r2

0x00092708    setDMAIRQHandler(dmaIrqId = r4, newHandler = r5) -> oldHandler = r2

0x00092CBC    printRectDebugInfo(stringPtr = r4, arrayPtr = r5)

0x0009332C    fillRect(headerPtr = r4, color = r5) -> unused = r2
0x0009355C    uploadTexture(headerPtr = r4, dataStartPtr = r5) -> hasFailed = r2

0x00093A90    gpuUploadCommandList(cmdPtr = r4)
0x00093AD8    getGPUInfo(infoEnum = r4) -> value = r2

0x00093B2C    gpuLoadImage(gpuFunctionPtr = r4, headerPtr = r5, headerSize = r6, dataPtr = r7) -> queueSize = r2
0x00093DDC    processImageQueue() -> queueNotEmpty = r2

0x0009418C    gpuDrawSync(syncMode = r4) -> result = r2
0x000942C8    setGPUTimeout()
0x000942FC    checkGPUTimeout()

0x000947B0    drawSync(syncMode = r4) -> result = r2
0x00094818    clearImage(headerPtr, red, green, blue)
0x000948A8    loadImage(headerPtr = r4, dataPtr = r5)

0x00097DD8    setTransformationMatrix(matrixPtr = r4)

0x0009AB10    rotateVectorByMatrix(matrixPtr = r4, vectorPtr = r5, resultPtr = r6) -> resultPtr = r2

0x0009B090    copy12toOffset20(dest = r4, src = r5) -> dest = r2
0x0009B0C0    scaleMatrix(destMatrixPtr = r4, scaleVector = r5) -> matrixPtr = r2

0x0009B200    setGTERotationMatrix(matrixPtr = r4)

0x0009B290    setGTETranslationVector(matrixPtr = r4)

0x0009B804    rotVecToRotMatrix(rotVec = r4, destMatrixPtr = r5) -> matrixPtr = r2

0x000A14C0    setupEntityMatrix(entityId = r4)
0x000A1540    setEntityPosition(entityId = r4, posX = r5, posY = r6, posZ = r7)

0x000A1CD8    resetFlattenGlobal()

0x000A254C    getDigimonModelComponent(digimonType = r4, entityType = r5) -> modelComponent = r2
0x000A2660    getEntityType(entityPtr = r4) -> entityType = r2 // 0 - NPC, 2 - Player, 3 - Partner, -1 - none

0x000A2F64    setObject(objectId = r4, instanceId = r5, funcPtr1 = r6, funcPtr2 = r7) -> success = r2
0x000A3008    unsetObject(objectId = r4, instanceId = r5) -> success = r2

0x000A36D4    random(upperLimit = r4) -> r2 //TODO

0x000A37FC    atan(diffY = r4, diffX = r5) -> angle = r2

0x000A3B20    0x000A3B20()

0x000A4A08    setFoodTimer(digimonId = r4)

0x000A568C    tickConditionBoundaries()
0x000A5804    tickSleepMechanics()
0x000A5EA0    tickUnhappinessMechanics()

0x000A6D00    sleepRegen()

0x000A70E4    tickTirednessMechanics()

0x000A75DC    tickHungerMechanics()
0x000A7960    handleConditionBubbles()

0x000A856C    tickSicknessMechanics()
0x000A8A3C    tickDeathCondition()

0x000A8F38    tickPartner()

0x000AA188    setMenuState(value = r4) //set 0x134C91 to r4, 0x134C92 to 0

0x000AC050    loadMenuState() -> r2   //loads 0x134C91 into r2
0x000AC05C    deferred call -> startAnimation(0x15576C, r4)
0x000AC06C    waitForEntityWalkTo(scriptId1 = r4, scriptId2 = r5, targetPosX = r6, targetPosZ = r7, val5 = load(sp + 0x10)) -> finished = r2

0x000AC2F8    loadEntityDataFromScriptId(scriptIdPtr = r4) -> entityPtr = r2, store(scriptIdPtr, entityId)

0x000AC3C8    waitForEntityLookAtEntity(scriptId1 = r4, scriptId2 = r5) -> finished = r2
0x000AC550    waitForEntitySetRotation(scriptId = r4, rotation = r5) -> finished = r2
0x000AC58C    waitForEntityMoveTo(scriptId1 = r4, scriptId2 = r5, targetPosX = r6, targetPosZ = r7, duration = load(sp + 0x10), val6 = load(sp + 0x14)) -> finished = r2
0x000AC860    waitForEntityMoveToAxis(scriptId = r4, targetValue = r5, axis = r6, duration = r7, withCamera = load(sp + 0x10)) -> finished = r2

0x000ACBF4    addTamerLevel(chance = r4, amount = r5)

// libcd functions, most not decompiled
0x000B0010    CdControl(command = r4, paramPtr = r5, resultPtr = r6) -> success = r2

0x000B0450    CdIntToPos(val1 = r4, target = r5)
0x000B0554    CdPosToInt(cdlloc = r4) -> sectorId = r2

0x000B1D48    lib_CdListDirs() -> success = r2 // stored in 0x13A210

0x000B234C    lib_CdReadFromSector(sectorCount = r4, loc = r5, targetBuf = r6) -> success = r2
0x000B23C0    CdSearchFile(filePtr = r4, filePath = r5)

0x000B2BB4    CdRead(sectors = r4, targetPtr = r5, mode = r6) -> result = r2
0x000B2CB4    CdReadSync(mode = r4, result = r5) -> remaining = r2

0x000B56F4    waitForMoveObjectTo(id = r4, otherId = r5, duration = r6, targetX = r7, targetY = load(sp + 0x10) -> finished = r2

0x000B6EDC    getRotationDifference(locationPtr1 = r4, locationPtr2 = r5) -> store(r6, targetAngle), store(r7, counterClockwiseDiff), store(load(sp + 0x10), clockwiseDiff)
0x000B6FB0    rotateEntity(rotationPtr = r4, targetAngle = load(r5), cClockwiseDiff = load(r6), clockwiseDiff = load(r7), stepSize = load(sp + 0x10)) -> finishedRotating = r2

0x000B78C4    scriptNPCStartAnimation(scriptId = r4, animationId = r5)

0x000BA40C    deferred -> store(0x123ED6, r4)

0x000C0BBC    checkMapCollisionX(entityPtr = r4, useYMin = r5) -> isColliding = r2
0x000C0D74    checkMapCollisionY(entityPtr = r4, useXMin = r5) -> isColliding = r2

0x000C0F28    getModelTile(modelPtr = r4) -> store(r5, tileX), store(r6, tileY)

0x000C1798    setZero36Offset18(dest = r4)

0x000C19A4    setupModelMatrix(nodePtr = r4)
0x000C1A04    startAnimation(entityPtr = r4, animId = r5)

0x000C3860    handleEvoItems(itemId = r4)
0x000C396C    handleFood(itemId = r4)
0x000C44C0    handleChips(itemId = r4)
0x000C4728    handleStatusItems(itemId = r4)
0x000C4834    handleRestore(itemId = r4)
0x000C4950    handleDoubleFloppy()
0x000C4A08    handleMPHealingItem(itemId = r4)
0x000C4AC0    handleHPHealingItem(itemId = r4)

0x000C51E0    getItemCount(itemId = r4) -> r2 = itemCount

0x000C563C    healValue(valueAddress = r4, amount = r5, upperLimit = r6)

0x000C57D0    modifyLifetime(amount = r4)

0x000C5804    addEnergy(amount = r4)
0x000C586C    subtractTiredness(amount = r4)
0x000C58A8    addHappiness(amount = r4)
0x000C58EC    addDiscipline(amount = r4)
0x000C5930    addWeight(amount = r4)
0x000C5994    decreasePoopLevel()
0x000C59B0    setTrainingBoost(flag = r4, mod = r5, duration = r6)
0x000C59E0    handleItemSickness(chance = r4)

0x000C6134    getNextSPUVoice(unused = r4) -> voiceId = r2
0x000C61D4    0x000C61D4(val1, val2, val3) -> bitMask = r2

0x000C6374    playSound(val1, val2)

0x000C8DA8    getSPUVoiceState(voiceMask = r4) -> voiceState = r2

0x000CEA04    0x000CEA04(voiceId, val2, val3, val4, val5, val6, val7, val8) -> voiceId = r2

0x000CF430    0x000CF430() // TODO something SPU related

0x000D2A48    0x000D2A48(val2, val3) -> retValue = r2 // TODO, something SPU related

0x000D3078    isTileWithinScreenArea(tileX = r4, tileY = r5) -> isWithinScreenArea = r2
0x000D3174    0x000D3174()
0x000D31AC    entityIsInEntity(entityPtr = r4, entityPtr2 = r5) -> isColliding = r2

0x000D3648    entityCheckCombatArea(entityPtr = r4, oldLocationPtr = r5, width = r6, height = r7) -> hasMovedOutside = r2

0x000D3858    isRectInRect(rectArray = r4, xMin = r5, yMin = r6, xMax = r7, yMax = load(sp + 0x10)) -> isInRect = r2
0x000D38D4    hasMovedOutsideCombatArea(screenPosOld = r4, screenPosOld = r5, width = r6, height = r7) -> hasMovedOutside = r2

0x000D39F8    clearPreviousLocations()

0x000D3AEC    getEntityTileFromModel(entityPtr = r4) -> store(r5, tileX), store(r6, tileY)
0x000D3B44    isFiveTileWidePathOpen(tileX1, tileY1, tileX2, tileY2) -> isPathOpen = r2
0x000D3C70    isLinearPathBlocked(tileX1, tileY1, tileX2, tileY2) -> isBlocked = r2

0x000D4564    storePreviousLocation(offset = r4, tileX = r5, tileY = r6)
0x000D459C    entityLookAtLocation(entityPtr = r4, posPointer2 = r5)
0x000D45EC    entityCheckCollision(noCollideEntityPtr = r4, checkedEntityPtr = r5, width = r6, height = r7) -> responseCode = r2

0x000D4F10    entityMoveForward(entityPtr = r4)
0x000D5018    checkMapCollision(entityPtr = r4, diffX = r5, diffY = r6) -> isColliding = r2
0x000D50DC    entityCheckEntityCollision(entityPtr = r4, entityPtr2 = r5, diffX = r6, diffY = r7)

0x000D5430    entityIsOffScreen(entityPtr = r4, width = r5, height = r6) -> isOffScreen = r2
0x000D5608    isOffScreen(screenPos = r4, width = r5, height = r6) -> isOffScreen = r2

0x000D7618    0x000D7618() -> r2 = r2 // 1 if 0x134D9C is >= 25

0x000D8780    storeEntityLocation(scriptId = r4, targetPtr = r5)
0x000D8860    spawnCameraMovement(instanceId)
0x000D88CC    waitForMoveCameraTo(posX = r4, posZ = r5, speed = r6) -> isFinished = r2

0x000DAC48    renderInventoryText()
0x000DAD04    renderInventoryTextLine(lineId = r4) -> result = r2

0x000DF2D0    setConditionAnimation()
0x000DF42C    setIdleAnimation()
0x000DF4D0    setDigimonState(value = r4) //set 0x134C5B to r4, 0x134C5C to 0

0x000E1C7C    waitForRotate3DObject(scriptId = r4, speed = r5) -> finished = r2

0x000E2544    getFreshEvolutionTarget(digimonType = r4) -> targetType = r2
0x000E2598    getInTrainingEvolutionTarget(digimonType = r4) -> targetType = r2
0x000E26B8    calculateRequirementScore(digimonType = r4, targetType = r5, isMaxCM = r6, isMaxBattles = r7, bestDigimon = load(sp + 0x10) -> requirementScore = r2
0x000E2BB4    getRookieEvolutionTarget(digimonType = r4) -> targetType = r2
0x000E2F08    getChampionEvolutionTarget(digimonType = r4) -> targetType = r2
0x000E3234    handleSpecialEvolutions(mode = r4, entityPtr = r5) -> targetType = r2
0x000E3510    getNumMasteredMoves() -> masteredMoves = r2

0x000E5290    swapByte(valPtr1 = r4, valPtr2 = r5)
0x000E52C0    swapValues(valPtr1 = r4, valPtr2 = r5)

0x000E5EB4    hasMove(moveId = r4) -> hasMove = r2
0x000E5F14    learnMove(moveId = r4)
0x000E6000    getTechFromMove(mapDataOffset = r4, move = r5) -> techId = r2
0x000E6078    entityLookAtTile(playerPtr = r4, tileX = r5, tileY = r6)

0x000E61AC    isInvisible(entityPtr = r4) -> result = r2


0x000E7484    isScreenConcave() -> isConcave = r2

0x000E7D40    handleBattleIdle(entityPtr = r4, statsPtr = r5, flags = r6)
0x000E7D9C    0x000E7D9C(entityId = r4, symbolId = r5)

0x000E847C    handleCombatStart(interactedEntity = r4) -> enemyCount = r2

0x000E8970    startBattleIdleAnimation(entityPtr = r4, statsPtr = r5, flags = r6)


0x000E9D24    setButterfly(entityPtr = r4) -> instanceId = r2

0x000E9FB4    unsetButterfly(instanceId = r4)

0x000EC538    setBubble(bubbleType = r4, entityPtr = r4) -> instanceId = r2

0x000ECE20    unsetBubble(instanceId = r4)

0x000ECEE8    battleStatsGainsAndDrops(itemDropArray = r4)

0x000EFA18    recalculatePPandArena()

0x000F06F0    handleBuffDisks(itemId = r4)

0x000F18A4    isAsciiEncoded(charPtr = r4) -> isAscii = r2
0x000F18C8    convertAsciiToGameChar(asciiVal = r4) -> dw1Char = r2

0x000F1AB0    swapBytes(val = r4) -> swappedVal = r2

0x000FC2D0    allocateArray(size = r4) -> arrayPtr = r2
0x000FC310    freeArray(arrayPtr = r4) 

0x000FC374    dailyPStatTrigger()   //increases PStat 29-32 by 1, rerolls card shop cards

0x000FF824    hasDigimonRaised(digimonId = r4) -> isRaised = r2 // deferred isTriggerCalled(512 + digimonId)
0x0010020C    0x0010020C() // resets some values at 0x1BE810

0x00102144    scriptIdToEntityId(scriptId = r4) -> entityId = r2

0x001026E8    loadFileSection(filePath = r4, target = r5, start = r6, size = r7)

0x0010569C    waitForEntity(waitForId = r4)

0x00105B14    callScriptSection(scriptId = r4, scriptSection = r5, value = r6)

0x00106218    getScript(scriptId = r4) -> scriptPtr = r2
0x0010629C    getScriptSection(scriptPtr = r4, sectionId = r5) -> scriptPtr = r2

0x001062E0    readPStat(target = r4) -> r2

0x0010643C    isTriggerSet(triggerId = r4) -> isSet = r2
0x00106474    writePStat(target = r4, value = r5)

0x00106598    pollNextScriptByte() -> store(r4, byteValue)
0x001065C0    setTrigger(triggerId = r4)
0x001065FC    unsetTrigger(triggerId = r4)

0x00106CA8    getTriggerOffsets(triggerId = r4) -> store(r5, triggerAddress), store(r6, triggerMask)

0x00106E0C    rollCardPack() -> cardId = r2

0x0010CB90    clearTextArea()
0x0010CBC4    clearTextSubArea(array = r4)

0x0010CC0C    setTextColor(colorCode = r4)
0x0010CC28    renderCharacter(charVal = r4, xPos = r5, yPos = r6) -> characterWidth = r2
0x0010CF24    renderString(stringPtr = r4, xPos = r5, yPos = r6)


// change player type
0xEE9B0 -> <DigimonID> 00 04 24
0xEEA4C